// Authors:

// Abel Arismendy
// 202020625
// a.arismendy@uniandes.edu.co

// Manuela Pacheco
// 202112410
// m.pachecom2@uniandes.edu.co


using gold.**

toSet(C) :=  {x|  x in C}

///====   mini Parser===

function createParser(A):IPushdownAutomaton begin
	Q:=(0‥28)
	Σ:=toSet(A)  ∪ {' ', '\n'}
	Γ:={'$'} ∪ toSet(A)
	q₀:=0
	F:= {0}
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)
	SkipChars := {' ', '\n'}   // this will only  be used when testing only the parser as the lexer removes  SkipChars

	// 6%v,v,v;[v(v,v){@(v);@(v);w(v)}][v(){8(C(O,#))<{w(O,#)}>}][v(){i(C(O,#)){w(O,#)}f}]{v(#,#);v=#;v(#,#)}9


	// Transitions

	M.delta(0,1,'6').push("$") // PROG

	// VARIABLES

	M.delta(1,1, '%').changeTop("$", "$;v")
	M.delta(1,1, 'v').pop("v")
	M.delta(1,1, ',').changeTop("$;", "$;v")
	M.delta(1,2, ';').pop(";")

	// PROCEDURES

	M.delta(2,2,'[').push("(v")
	M.delta(2,2,'v').pop("v")
	M.delta(2,3,'(').changeTop("$(", "$(v")
	M.delta(2,4,'(').ignore()
	M.delta(2,5,'{').changeTop("$", "$$}")

	// M.delta(2,0,'9').pop("$")

	// PROCEDURE PARAMETERS

	M.delta(3,3,'v').pop("v")
	M.delta(3,3,',').changeTop("$(", "$(v")
	M.delta(3,4,')').pop("(")

	M.delta(4,4,')').changeTop("$(", "$")

	M.delta(4,5,'{').push("}")
	M.delta(4,5,'{').changeTop("$}iC", "$}i}")
	M.delta(4,5,'{').changeTop("$}ie", "$}ie}")
	M.delta(4,5,'{').changeTop("$}8", "$}8}")
	M.delta(4,5,'{').changeTop("$}r#", "$}r#}")

	// PROCEDURE BODY

	M.delta(5,6,'@').push(")#(")
	M.delta(5,6,'@').push(")v(")
	M.delta(5,7,'j').push(")#,#(")
	M.delta(5,7,'j').push(")v,#(")
	M.delta(5,7,'j').push(")#,v(")
	M.delta(5,7,'j').push(")v,v(")
	M.delta(5,8,'V').push(")L(")
	M.delta(5,8,'V').push(")R(")
	M.delta(5,8,'V').push(")A(")
	M.delta(5,9,'l').push(")O(")
	M.delta(5,10,'v').push("#=")

	// walk(n)
	M.delta(5,6,'w').push(")#(")
	M.delta(5,6,'w').push(")v(")
	// walk(o,n)
	M.delta(5,11,'w').push(")#,O(")
	M.delta(5,11,'w').push(")v,O(")
	// walk(d,n)
	M.delta(5,12,'w').push(")#,F(")
	M.delta(5,12,'w').push(")#,R(")
	M.delta(5,12,'w').push(")#,L(")
	M.delta(5,12,'w').push(")#,B(")
	M.delta(5,12,'w').push(")v,F(")
	M.delta(5,12,'w').push(")v,R(")
	M.delta(5,12,'w').push(")v,L(")
	M.delta(5,12,'w').push(")v,B(")

	M.delta(5,26,'v').push(")A(")
	M.delta(5,26,'v').push(")(")

	// M.delta(5,24,'}').pop("}")
	// M.delta(5,18,'}').changeTop("$}i}", "$}i")
	// M.delta(5,19,'}').changeTop("$}ie}", "$}ie")

	// FUNCTION CALL

	M.delta(26,27,'(').pop("(")
	M.delta(27,27,'v').pop("A")
	M.delta(27,27,'#').pop("A")
	M.delta(27,27,',').changeTop(")", ")A")
	M.delta(27,28,')').pop(")")
	M.delta(28,5,';').ignore()
	M.delta(28,24,'}').changeTop("$}", "$")
	M.delta(28,25,'}').changeTop("$$}", "$$")
	M.delta(28,18,'}').changeTop("$}i}", "$}i")
	M.delta(28,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(28,21,'}').changeTop("$}8}", "$}8")
	M.delta(28,23,'}').changeTop("$}r#}", "$}r")



	// PROCEDURE CALL @

	M.delta(6,6,'(').pop("(")
	M.delta(6,6,'#').pop("#")
	M.delta(6,6,'v').pop("v")
	M.delta(6,6,')').pop(")")
	M.delta(6,5,';').ignore()
	M.delta(6,24,'}').changeTop("$}", "$")
	M.delta(6,25,'}').changeTop("$$}", "$$")
	M.delta(6,18,'}').changeTop("$}i}", "$}i")
	M.delta(6,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(6,21,'}').changeTop("$}8}", "$}8")
	M.delta(6,23,'}').changeTop("$}r#}", "$}r")


	// PROCEDURE CALL j

	M.delta(7,7,'(').pop("(")
	M.delta(7,7,'#').pop("#")
	M.delta(7,7,'v').pop("v")
	M.delta(7,7,',').pop(",")
	M.delta(7,7,')').pop(")")
	M.delta(7,5,';').ignore()
	M.delta(7,24,'}').changeTop("$}", "$")
	M.delta(7,25,'}').changeTop("$$}", "$$")
	M.delta(7,18,'}').changeTop("$}i}", "$}i")
	M.delta(7,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(7,21,'}').changeTop("$}8}", "$}8")
	M.delta(7,23,'}').changeTop("$}r#}", "$}r")




	// PROCEDURE CALL V

	M.delta(8,8,'(').pop("(")
	M.delta(8,8,'L').pop("L")
	M.delta(8,8,'R').pop("R")
	M.delta(8,8,'A').pop("A")
	M.delta(8,8,')').pop(")")
	M.delta(8,5,';').ignore()
	M.delta(8,24,'}').changeTop("$}", "$")
	M.delta(8,25,'}').changeTop("$$}", "$$")
	M.delta(8,18,'}').changeTop("$}i}", "$}i")
	M.delta(8,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(8,21,'}').changeTop("$}8}", "$}8")
	M.delta(8,23,'}').changeTop("$}r#}", "$}r")




	// PROCEDURE CALL l

	M.delta(9,9,'(').pop("(")
	M.delta(9,9,'O').pop("O")
	M.delta(9,9,')').pop(")")
	M.delta(9,5,';').ignore()
	M.delta(9,24,'}').changeTop("$}", "$")
	M.delta(9,25,'}').changeTop("$$}", "$$")
	M.delta(9,18,'}').changeTop("$}i}", "$}i")
	M.delta(9,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(9,21,'}').changeTop("$}8}", "$}8")
	M.delta(9,23,'}').changeTop("$}r#}", "$}r")




	// PROCEDURE CALL ASSIGNMENT

	M.delta(10,10,'=').pop("=")
	M.delta(10,10,'#').pop("#")
	M.delta(10,5,';').ignore()
	M.delta(10,24,'}').changeTop("$}", "$")
	M.delta(10,25,'}').changeTop("$$}", "$$")
	M.delta(10,18,'}').changeTop("$}i}", "$}i")
	M.delta(10,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(10,21,'}').changeTop("$}8}", "$}8")
	M.delta(10,23,'}').changeTop("$}r#}", "$}r")




	// PROCEDURE CALL walk(o,n)

	M.delta(11,11,'(').pop("(")
	M.delta(11,11,'O').pop("O")
	M.delta(11,11,',').pop(",")
	M.delta(11,11,'v').pop("v")
	M.delta(11,11,'#').pop("#")
	M.delta(11,11,')').pop(")")
	M.delta(11,5,';').ignore()
	M.delta(11,24,'}').changeTop("$}", "$")
	M.delta(11,25,'}').changeTop("$$}", "$$")
	M.delta(11,18,'}').changeTop("$}i}", "$}i")
	M.delta(11,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(11,21,'}').changeTop("$}8}", "$}8")
	M.delta(11,23,'}').changeTop("$}r#}", "$}r")




	// PROCEDURE CALL walk(d,n)

	M.delta(12,12,'(').pop("(")
	M.delta(12,12,'F').pop("F")
	M.delta(12,12,'R').pop("R")
	M.delta(12,12,'L').pop("L")
	M.delta(12,12,'B').pop("B")
	M.delta(12,12,',').pop(",")
	M.delta(12,12,'v').pop("v")
	M.delta(12,12,'#').pop("#")
	M.delta(12,12,')').pop(")")
	M.delta(12,5,';').ignore()
	M.delta(12,24,'}').changeTop("$}", "$")
	M.delta(12,25,'}').changeTop("$$}", "$$")
	M.delta(12,18,'}').changeTop("$}i}", "$}i")
	M.delta(12,19,'}').changeTop("$}ie}", "$}ie")
	M.delta(12,21,'}').changeTop("$}8}", "$}8")
	M.delta(12,23,'}').changeTop("$}r#}", "$}r")




	// CONTROL STRUCTURES

	// IF

	M.delta(5,13,'i').push("i")

	// CONDITIONS

	M.delta(13,14,'(').push(")O(&")
	M.delta(13,14,'(').push("))O(&(N")

	M.delta(13,15,'(').push(")v,@(T")
	M.delta(13,15,'(').push(")#,@(T")
	M.delta(13,15,'(').push(")#,w(T")
	M.delta(13,15,'(').push(")v,w(T")
	M.delta(13,15,'(').push("))v,@(T(N")
	M.delta(13,15,'(').push("))#,@(T(N")
	M.delta(13,15,'(').push("))v,w(T(N")
	M.delta(13,15,'(').push("))#,w(T(N")

	M.delta(13,16,'(').push(")v,O(C")
	M.delta(13,16,'(').push(")#,O(C")
	M.delta(13,16,'(').push("))#,O(C(N")
	M.delta(13,16,'(').push("))v,O(C(N")

	M.delta(13,17,'(').push(")#,F(C")
	M.delta(13,17,'(').push(")#,B(C")
	M.delta(13,17,'(').push(")#,L(C")
	M.delta(13,17,'(').push(")#,R(C")
	M.delta(13,17,'(').push(")v,F(C")
	M.delta(13,17,'(').push(")v,B(C")
	M.delta(13,17,'(').push(")v,L(C")
	M.delta(13,17,'(').push(")v,R(C")
	M.delta(13,17,'(').push("))#,F(C(N")
	M.delta(13,17,'(').push("))#,B(C(N")
	M.delta(13,17,'(').push("))#,L(C(N")
	M.delta(13,17,'(').push("))#,R(C(N")
	M.delta(13,17,'(').push("))v,F(C(N")
	M.delta(13,17,'(').push("))v,B(C(N")
	M.delta(13,17,'(').push("))v,L(C(N")
	M.delta(13,17,'(').push("))v,R(C(N")


	// isFacing(O)
	M.delta(14,14,'&').pop("&")
	M.delta(14,14,'(').pop("(")
	M.delta(14,14,'N').pop("N")
	M.delta(14,14,'O').pop("O")
	M.delta(14,14,')').pop(")")
	M.delta(14,4,')').changeTop("$}i","$}iC")
	M.delta(14,20,')').changeTop("$}8","$}8C")

	// isValid(ins,n)
	M.delta(15,15,'T').pop("T")
	M.delta(15,15,'(').pop("(")
	M.delta(15,15,'v').pop("v")
	M.delta(15,15,',').pop(",")
	M.delta(15,15,'#').pop("#")
	M.delta(15,15,')').pop(")")
	M.delta(15,15,'@').pop("@")
	M.delta(15,15,'w').pop("w")
	M.delta(15,15,'N').pop("N")
	M.delta(15,4,')').changeTop("$}i","$}iC")
	M.delta(15,20,')').changeTop("$}8","$}8C")


	// canWalk(O,n)
	M.delta(16,16,'C').pop("C")
	M.delta(16,16,'(').pop("(")
	M.delta(16,16,'O').pop("O")
	M.delta(16,16,',').pop(",")
	M.delta(16,16,'v').pop("v")
	M.delta(16,16,'#').pop("#")
	M.delta(16,16,')').pop(")")
	M.delta(16,16,'N').pop("N")
	M.delta(16,4,')').changeTop("$}i","$}iC")
	M.delta(16,20,')').changeTop("$}8","$}8C")


	// canWalk(d,n)
	M.delta(17,17,'C').pop("C")
	M.delta(17,17,'(').pop("(")
	M.delta(17,17,'F').pop("F")
	M.delta(17,17,'R').pop("R")
	M.delta(17,17,'L').pop("L")
	M.delta(17,17,'B').pop("B")
	M.delta(17,17,',').pop(",")
	M.delta(17,17,'v').pop("v")
	M.delta(17,17,'#').pop("#")
	M.delta(17,17,')').pop(")")
	M.delta(17,17,'N').pop("N")
	M.delta(17,4,')').changeTop("$}i","$}iC")
	M.delta(17,20,')').changeTop("$}8","$}8C")


	// WHILE

	M.delta(5,13,'8').push("8")
	M.delta(20,4,'<').pop("C")

	// REPEAT TIMES

	M.delta(5,22,'r').push("r")
	M.delta(22,4,'v').changeTop("$}r","$}r#")
	M.delta(22,4,'#').changeTop("$}r","$}r#")

	// CONTROL STRUCTURES BLOCK

	// IF
	// AFTER FINISHING THE IF STATEMENT, THE CONDITION, AND THE BLOCK, THE STACK SHOULD BE LIKE THIS:
	// $}i

	M.delta(18,18,'f').pop("i")
	M.delta(18,5,';').ignore()
	M.delta(18,4,'e').changeTop("$}i","$}ie")
	M.delta(18,24,'}').changeTop("$}","$")
	M.delta(18,25,'}').changeTop("$$}", "$$")


	// ELSE
	// AFTER FINISHING THE ELSE STATEMENT, THE CONDITION, AND THE BLOCK, THE STACK SHOULD BE LIKE THIS:
	// $}ie

	M.delta(19,19,'f').pop("ie")
	M.delta(19,5,';').ignore()
	M.delta(19,24,'}').changeTop("$}","$")
	M.delta(19,25,'}').changeTop("$$}", "$$")


	// WHILE
	// AFTER FINISHING THE WHILE STATEMENT, THE CONDITION, AND THE BLOCK, THE STACK SHOULD BE LIKE THIS:
	// $}8

	M.delta(21,21,'>').pop("8")
	M.delta(21,5,';').ignore()
	M.delta(21,24,'}').changeTop("$}","$")
	M.delta(21,25,'}').changeTop("$$}", "$$")


	// REPEAT TIMES
	// AFTER FINISHING THE REPEAT TIMES STATEMENT, THE CONDITION, AND THE BLOCK, THE STACK SHOULD BE LIKE THIS:
	// $}r

	M.delta(23,23,'p').pop("r")
	M.delta(23,5,';').ignore()
	M.delta(23,24,'}').changeTop("$}","$")
	M.delta(23,25,'}').changeTop("$$}", "$$")

	// READ CORP

	M.delta(24,2,']').ignore()

	// INSTRUCTION BLOCK

	M.delta(25,0,'9').pop("$$")

	// M.delta(0,0,'9').pop("$") //GORP


 // this will only  be used when testing only the parser as the lexer removes  SkipChars
for each q in Q do
	for each s in SkipChars do
	M.delta(q,q,λ+s).ignore()
end
end


return M
end

